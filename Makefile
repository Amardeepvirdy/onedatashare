# Configuration
# =============
# Build information
APPNAME = Stork
VERSION = 0.0.4

# =============
PROJECT = stork
JARFILE = lib/$(PROJECT)-$(VERSION).jar

CLASSPATH = 'lib/*:build'
JFLAGS = -J-Xmx512m -g -cp $(CLASSPATH) -Xlint:unchecked \
				 #-target 1.7 -source 1.6
JC = javac
JAR = jar -J-Xmx512m

.PHONY: all install clean init release classes
.SUFFIXES: .java .class

# Recursive wildcard function from jgc.org.
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) \
	$(filter $(subst *,%,$2),$d))

JAVASRCS = $(call rwildcard,$(PROJECT),*.java)
CLASSES = $(JAVASRCS:%.java=build/%.class)

TO_BUILD = # Generated by "build/%.class" rule.
JC_CMD = # Set only if we need to compile something.

all: $(CLASSES) | build
	$(JC_CMD) $(TO_BUILD)
	@$(MAKE) --no-print-directory build/build_tag 
	@$(MAKE) --no-print-directory $(JARFILE)

build:
	@mkdir -p build

$(JARFILE): $(CLASSES)
	$(JAR) cf $(JARFILE) -C build .

build/%.class: %.java | build
	$(eval TO_BUILD += $<)
	$(eval JC_CMD = $(JC) $(JFLAGS) -d build)

classes: $(TO_BUILD) | build

release: $(PROJECT).tar.gz

src-release: $(PROJECT)-src.tar.gz

$(PROJECT).tar.gz: $(JARFILE) 
	tar czf $(PROJECT).tar.gz bin libexec --exclude='*/CVS' \
		--transform 's,^,$(PROJECT)/,'

$(PROJECT)-src.tar.gz: dist-clean
	tar czf $(PROJECT)-src.tar.gz * --exclude='*/CVS'

build/build_tag: $(CLASSES) | build
	@echo generating build tag
	@echo appname = '$(APPNAME)' >  build/build_tag
	@echo version = '$(VERSION)' >> build/build_tag
	@echo buildtime = `date`     >> build/build_tag

clean:
	$(RM) -rf build lib/stork-*.jar $(PROJECT).tar.gz
