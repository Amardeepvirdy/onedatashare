WHAT'S THIS?

  The Stork README file. Aptly named, you should take its advice!

  NOTE: This file, like Stork, is still in beta, and a lot of the
  features mentioned herein are not implemented (though will be soon).

  If there is a * at the beginning of a line, it means something in
  that line has not been implemented yet.

  Maintainers/Contributors: Two spaces at the beginning of each line
  under a header, NO TABS, line should wrap at 72 characters, per my
  arbitrary decree.

WHAT IS STORK?
  Stork is a data transfer scheduler that provides a common interface
  to different file transfer protocols

  Stork uses a client-server architecture where clients submit jobs to
  a Stork server and the Stork server performs the transfer when
  resources permit. The transfer happens asynchronously to the client,
  allowing users to go along their merry way and check on the status
  of the job at their own leisure. The Stork server responds to any
  failures that may occur during transfer automatically, handling them
  in an appropriate way and informing the user if a job can't be
  completed.

  Stork plug-ins can be created to add support for novel file transfer
  protocols very easily (wit any programming language, too) using a
  simple external executable interface. If additional performance or
  integration with the Stork server is desired, plug-ins can also be
  written in Java and extend the built-in TransferModule class.

CLASSADS

  Stork makes extensive use of the ClassAd language -- a data
  representation format developed by the Condor Team at UW-Madison.
  ClassAds are human-readable, easy to parse, and even easier to
  generate. All communication in Stork is done in ClassAds. Clients and
  servers speak ClassAds, transfer modules output their progress via
  ClassAds, and jobs are submitted to the Stork server as ClassAds.
  Even the config file is a ClassAd, albeit with comments and no
  brackets. Trust me, we really abuse them!

  Understanding ClassAds is key to using Stork's advanced features.
  Luckily, they're intuitive and easy to understand. Here's an example
  ClassAd that describes a simple Stork job that will attempt the
  transfer at most five times and will send an email to the user when
  the job starts and completes:

  [ src_url = "ftp://example.com/file1.txt";
    dest_url = "ftp://example.com/file2.txt";
    max_attempts = 5; email = "user@example.com" ]

  Note that each ClassAd begins with a [ and ends with a ]. Everything
  inside is in the form of "key = value", and each key-value pair is
  separated by a semicolon. And that's all there really is to it.

  Submitting jobs to Stork as ClassAds allows you to have greater
  control over the details of the job. While stork_submit will
  automatically and transparently generate ClassAds based on arguments
  passed to it on the command line, not every aspect of the job can be
  controlled from the command line. ClassAd descriptions of jobs also
  let you batch submit jobs from files or pass them in from other
  programs via pipes. This allows you to automate job submission or
  even generate jobs algorithmically.

  ClassAds are also output by stork_q and stork_info, so being able to
  read them at least is necessary to use Stork.

  ClassAds are also used by transfer modules to pass messages and job
  progress back to the Stork server, and the Stork server can pass
  ClassAds to transfer modules that support it. They are also used
  internally for communication between clients and the Stork server, so
  communicating with the server from third-party clients requires
  understanding ClassAds.

  In short, ClassAds are pretty important for all but the most basic
  usage scenarios 

  More information about ClassAds, can be found here:

    <http://research.cs.wisc.edu/condor/classad/>

SUPPORTED PLATFORMS
  Any modern operating system that can run a JVM.

BUILDING
  On most systems, simply run `make'! 

COMMANDS
  stork_server - Used to start (or stop) a Stork server.

  stork_q - List all the jobs in the Stork queue along with information
    about them, such as their status and progress. Can be used to find
    information about specific jobs by passing a job id. Can also be
    used to filter jobs by their status.

  stork_submit - Submit a job to a Stork server. Can be passed a source
    and destination URL, or a ClassAd descriptor of the job.

  stork_rm - Remove or terminate a submitted job or set of jobs.

  stork_info - Display configuration information about the server. Can
    also be used to find information about transfer modules.

CONFIGURING
  The Stork configuration file (stork.conf) can be used to change
  settings for the server and client tools. The search order for the
  configuration file is as follows:

   1) STORK_CONFIG environment variable
   2) ~/.stork.conf
   3) /etc/stork.conf
   4) (install dir)/stork.conf
   5) /usr/local/stork/stork.conf
   6) stork.conf in currect directory

  Even if the file can't be found automatically, every valid config
  

HOW TO USE
  Start a Stork server, unless you plan on using an existing server.
  Submit a job to the server using stork_submit. If it's a simple 

API
  All communication in Stork is done in ClassAds. To communicate with
  a 
