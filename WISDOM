WHAT'S THIS?

  Coding guidelines for the project. Also guidelines for writing files
  such as this. If you are a maintainer or contributor, you need to
  read this.

WISDOM (TL;DR)

  0) Coding is art. Code like it's art. And be proud.

  1) Spaces, not tabs. Indentation level: 2

  2) Some code in Eclipse, some in vi. Keep that in mind.

  3) Don't leave temporary files. (That includes hidden files.)

  4) `make clean' before committing.

LINES AND INDENTATION

  In short, as mentioned above, use spaces, two per indentation. Wrap
  lines at 75 characters. Read on if you want the rationale.

  Some people like tabs, some people like spaces. There are good
  arguments to use either, but this project uses spaces. Why? There's a
  little philosophy behind this choice.

  Spaces convey intent better, you see. If you want to align some code
  in a way that makes its meaning more apparent, spaces let you do that
  explicitly. If you use tabs, and someone uses a different tab size
  than you, the code may not align properly unless you were very
  careful.

  Furthermore, if we used tabs, line length would depend on tab size,
  and it would be more difficult to keep lines at 75 characters. Using
  spaces means N characters = N columns, for everyone, everywhere.

  On that note, try to break lines at about 75 characters. This is
  because a lot of terminals are 80 characters wide, and it makes things
  nicer for those of us who code on terminals. It's also a little
  annoying to read really long lines. It doesn't need to be exact, and
  you don't need to pull your hair out over it, just keep it around 75
  characters as best as you can.

  The exception is in documentation files such as this, where the lines
  may be at most 72 characters long.

CODING GUIDELINES

  As written above, code is art. It derives its aesthetic quality from
  its elegance, consistency, and parsimony. When you produce code that
  is elegant, consistent, and parsimonious, you produce something that
  is not just easy to read, but also illuminating or enjoyable to. And
  since reading the code is half the work involved in adding to it, it
  serves as a courtesy to your fellow developer to make your code easy
  to understand and pleasant to read through. Furthermore, once you're
  able to appreciate code as art, you can take pride in more than just
  the fact that your code works, but also in the fact that you've made
  something other people will be able to find aesthetic beauty in; you
  become an artist when you code like it's art. And though, aside from
  syntax highlighting, there are no pretty colors like a painting when
  you write good code, the beauty comes through in the subtleties -- a
  symmetry in structure exposing an underlying pattern in an algorithm
  or an elegantly crafted expression terse enough that one can take it
  in without moving an eye or even something so mundane yet indicative
  of effort (or neurosis) as a paragraph whose lines are equally long.

DOCUMENTATION

  Documentation, as far as the code goes, is in comments distributed
  throughout the source code, and in the structure of the code itself.
  If you want to know what classes and methods do what, read the
  source. As such, when you write code, make sure it's clear and
  include comments explaining your code where appropriate.

  Documentation regarding the project layout is available below.

  Documentation in the form of files such as this should be split into
  sections with titles in all capitals. The body of each section should
  be indented twice with spaces, and lines may not be longer than 72
  characters long. This is completely arbitrary. The only reason is to
  keep everything consistent and pretty.

  Documentation is as much art as code is.

PROJECT STRUCTURE

WHO WROTE THIS?

  Brandon Ross <bwross@buffalo.edu>. Feel free to say hi! :)
